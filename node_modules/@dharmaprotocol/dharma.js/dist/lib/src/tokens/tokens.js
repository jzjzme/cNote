"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("../types");
var token_api_1 = require("../apis/token_api");
var Tokens = /** @class */ (function () {
    function Tokens(dharma, owner) {
        this.dharma = dharma;
        this.owner = new types_1.EthereumAddress(owner);
        this.getDataPromise = this.getDataPromise.bind(this);
    }
    Tokens.prototype.get = function () {
        return __awaiter(this, void 0, void 0, function () {
            var tokens;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.dharma.token.getSupportedTokens()];
                    case 1:
                        tokens = _a.sent();
                        return [2 /*return*/, Promise.all(tokens.map(this.getDataPromise))];
                }
            });
        });
    };
    Tokens.prototype.getTokenDataForSymbol = function (symbol) {
        return __awaiter(this, void 0, void 0, function () {
            var attributes;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.dharma.token.getTokenAttributesBySymbol(symbol)];
                    case 1:
                        attributes = _a.sent();
                        return [2 /*return*/, this.getDataPromise(attributes)];
                }
            });
        });
    };
    Tokens.prototype.getDataPromise = function (tokenAttributes) {
        return __awaiter(this, void 0, void 0, function () {
            var address, symbol, name, numDecimals, rawBalance, rawAllowance, balanceAmount, allowanceAmount, hasUnlimitedAllowance;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        address = tokenAttributes.address, symbol = tokenAttributes.symbol, name = tokenAttributes.name, numDecimals = tokenAttributes.numDecimals;
                        return [4 /*yield*/, this.dharma.token.getBalanceAsync(address, this.owner.toString())];
                    case 1:
                        rawBalance = _a.sent();
                        return [4 /*yield*/, this.dharma.token.getProxyAllowanceAsync(address, this.owner.toString())];
                    case 2:
                        rawAllowance = _a.sent();
                        balanceAmount = types_1.TokenAmount.fromRaw(rawBalance, symbol);
                        allowanceAmount = types_1.TokenAmount.fromRaw(rawAllowance, symbol);
                        hasUnlimitedAllowance = token_api_1.TokenAPI.isUnlimitedAllowance(allowanceAmount.rawAmount);
                        console.log(hasUnlimitedAllowance);
                        return [2 /*return*/, {
                                symbol: symbol,
                                name: name,
                                address: address,
                                numDecimals: numDecimals.toNumber(),
                                balance: balanceAmount.decimalAmount,
                                allowance: allowanceAmount.decimalAmount,
                                hasUnlimitedAllowance: hasUnlimitedAllowance,
                            }];
                }
            });
        });
    };
    return Tokens;
}());
exports.Tokens = Tokens;
//# sourceMappingURL=tokens.js.map