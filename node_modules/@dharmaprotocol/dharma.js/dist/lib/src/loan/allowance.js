"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("../types");
var bignumber_1 = require("../../utils/bignumber");
/**
 * Provides functionality for token transfer allowance.
 */
var Allowance = /** @class */ (function () {
    function Allowance(dharma, owner, tokenSymbol) {
        this.dharma = dharma;
        this.tokenSymbol = tokenSymbol;
        this.owner = new types_1.EthereumAddress(owner);
    }
    /**
     * Eventually sets the transfer allowance of the current token and user address pair
     * on the token transfer proxy to unlimited if necessary. If an update occurs, this method
     * returns a transaction hash.
     *
     * @example
     * const allowance = new Allowance(dharma, ethAddress, "WETH");
     * await allowance.makeUnlimitedIfNecessary();
     * => "0x..."
     *
     * @returns {Promise<string | void>}
     */
    Allowance.prototype.makeUnlimitedIfNecessary = function () {
        return __awaiter(this, void 0, void 0, function () {
            var tokenAddress, hasUnlimitedAllowance;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.dharma.contracts.getTokenAddressBySymbolAsync(this.tokenSymbol)];
                    case 1:
                        tokenAddress = _a.sent();
                        return [4 /*yield*/, this.dharma.token.hasUnlimitedAllowance(tokenAddress, this.owner.toString())];
                    case 2:
                        hasUnlimitedAllowance = _a.sent();
                        if (!hasUnlimitedAllowance) {
                            return [2 /*return*/, this.dharma.token.setUnlimitedProxyAllowanceAsync(tokenAddress, {
                                    from: this.owner.toString(),
                                })];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Revokes the proxy's allowance for the current account.
     *
     * @returns {Promise<string>}
     */
    Allowance.prototype.revoke = function () {
        return __awaiter(this, void 0, void 0, function () {
            var tokenAddress;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.dharma.contracts.getTokenAddressBySymbolAsync(this.tokenSymbol)];
                    case 1:
                        tokenAddress = _a.sent();
                        return [2 /*return*/, this.dharma.token.setProxyAllowanceAsync(tokenAddress, new bignumber_1.BigNumber(0), {
                                from: this.owner.toString(),
                            })];
                }
            });
        });
    };
    return Allowance;
}());
exports.Allowance = Allowance;
//# sourceMappingURL=allowance.js.map