import { DebtOrderData, ECDSASignature, EthereumAddress, InterestRate, TimeInterval, TokenAmount } from "../types";
import { Dharma } from "../dharma";
export interface BaseLoanConstructorParams {
    principal: TokenAmount;
    collateral: TokenAmount;
    interestRate: InterestRate;
    termLength: TimeInterval;
    expiresAt: number;
    relayer?: EthereumAddress;
    relayerFee?: TokenAmount;
    creditorFee?: TokenAmount;
    debtorFee?: TokenAmount;
}
export interface LoanData {
    kernelVersion: string;
    issuanceVersion: string;
    principalAmount: string;
    principalToken: string;
    debtor: string;
    debtorFee: string;
    creditor: string;
    creditorFee: string;
    relayer: string;
    relayerFee: string;
    underwriter: string;
    underwriterFee: string;
    underwriterRiskRating: string;
    termsContract: string;
    termsContractParameters: string;
    expirationTimestampInSec: string;
    salt: string;
    debtorSignature: ECDSASignature;
    creditorSignature: ECDSASignature;
    underwriterSignature: ECDSASignature;
}
export declare abstract class Agreement {
    dharma: Dharma;
    params: BaseLoanConstructorParams;
    data: DebtOrderData;
    protected constructor(dharma: Dharma, params: BaseLoanConstructorParams, data: DebtOrderData);
    getAgreementId(): string;
    toJSON(): LoanData;
}
