import { Dharma } from "../dharma";
/**
 * Provides functionality for token transfer allowance.
 */
export declare class Allowance {
    private readonly dharma;
    private readonly tokenSymbol;
    private owner;
    constructor(dharma: Dharma, owner: string, tokenSymbol: string);
    /**
     * Eventually sets the transfer allowance of the current token and user address pair
     * on the token transfer proxy to unlimited if necessary. If an update occurs, this method
     * returns a transaction hash.
     *
     * @example
     * const allowance = new Allowance(dharma, ethAddress, "WETH");
     * await allowance.makeUnlimitedIfNecessary();
     * => "0x..."
     *
     * @returns {Promise<string | void>}
     */
    makeUnlimitedIfNecessary(): Promise<string | void>;
    /**
     * Revokes the proxy's allowance for the current account.
     *
     * @returns {Promise<string>}
     */
    revoke(): Promise<string>;
}
